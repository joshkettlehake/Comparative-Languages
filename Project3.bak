#lang racket

(define faces '(2 3 4 5 6 7 8 9 10 J Q K A))
(define suits '(club spade heart diamond))

(define (make-deck first-list second-list)
  (for*/list ([x first-list]
              [y second-list])
    (cons x y)))

;; creates an entire deck. A list of 52 card types.
(define the-deck
  (make-deck faces suits))

;; A recursive shuffle a list procedure. Shuffles the whole deck in this program. 
(define (shuffle! list)
  (define (loop in out n)
    (if (= n 0) (cons (car in) (shuffle! (append (cdr in) out)))
        (loop (cdr in) (cons (car in) out) (- n 1))))
  (if (null? list)
      '()
      (loop list '() (random (length list)))))

(define (deal!)
  (let ((deck (shuffle! the-deck)))
    (let ((dealer (cons (car deck) (cons (cadr deck) '())))
          (player (cons (caddr deck) (cons (cadddr deck) '()))))
      (display "Dealer shows")
      (newline)
      (display (car dealer))
      (newline)
      (display "You have")
      (newline)
      (display player)
      (display " Equalling ")
      (display (eval-hand player))
      (newline)
      (set! deck (cddddr deck))
      (define (iter)
        (display "DO YOU WANT TO hit or stand?")
        (newline)
        (let ((answer (read)))
          (cond ((eq? answer 'hit) 
                 (begin (set! player (cons (car deck) player))
                        (display player)
                        (display " Equalling ")
                        (display (eval-hand player))
                        (cond ((and (> (eval-hand player) 21) (newline) "YOU BUST / YOU LOSE!"))
                              ((< (eval-hand player) 21) (begin (newline)
                                                                (set! deck (cdr deck))
                                                                (iter)))
                              (else (iter)))))
                ((eq? answer 'stand)
                 (cond ((and (equal? (eval-hand player) 21) (= 2 (length player)))
                        "BLACKJACK!")
                       ((= (eval-hand player) 21) (dealer-finishes-game))
                       (else (dealer-finishes-game))))
                (else "fail"))))
      (define (dealer-finishes-game)
        (newline)
        (display "Dealer shows")
        (newline)
        (display dealer)
        (display " Equalling ")
        (display (eval-hand dealer))
        (newline)
        (cond ((> (eval-hand dealer) 21) "Dealer Busts! YOU WIN!")
              ((and (= 21 (eval-hand dealer)) (= 21 (eval-hand player))) "PUSH!")
              ((or (= 21 (eval-hand dealer)) 
                   (> (eval-hand dealer) (eval-hand player))) "DEALER WINS. YOU LOSE!")
              (else (< (eval-hand dealer) (eval-hand player)) (begin (set! dealer (cons (car deck) dealer))
                                                                     (set! deck (cdr deck))
                                                                     (display "Dealer Hits")
                                                                     (dealer-finishes-game)))))                                                                                       
      (iter))))
              

;; There are a maximum of four aces in play at any given time 
;; If a player has more than one ace it must equal 11 (or bust)
(define (eval-hand list)
  (let ((track-aces (ace-count list)) ; Keeps track of the number of aces in a hand
        (count 0) 
        (alt-count 0))
    (define (adjust-counts-for-aces)
      (if (>= track-aces 1)
          (cond ((= track-aces 1) (begin (set! count (+ 11 count))
                                         (set! alt-count (+ 1 alt-count))
                                         (tally)))
                ((= track-aces 2) (begin (set! count (+ 12 count))
                                         (set! alt-count (+ 2 alt-count))
                                         (tally)))
                ((= track-aces 3) (begin (set! count (+ 13 count))
                                         (set! alt-count (+ 3 alt-count))
                                         (tally)))
                ((= track-aces 4) (begin (set! count (+ 14 count))
                                         (set! alt-count (+ 4 alt-count))
                                         (tally)))
                (else "too many aces failure!"))
          count))
    (define (tally)
      (if (>= 21 count) count
          alt-count))
    (define (iter list-1)
      (cond ((null? list-1) (adjust-counts-for-aces))
            ((eq? (caar list-1) 'A) (iter (cdr list-1)))   

            ;; JQK must equal 10
            ((or (eq? (caar list-1) 'J)
                 (eq? (caar list-1) 'Q)
                 (eq? (caar list-1) 'K)) (begin (set! count (+ count 10))
                                                (set! alt-count (+ alt-count 10))
                                                (iter (cdr list-1))))
            (else (begin (set! count (+ (caar list-1) count))
                         (set! alt-count (+ (caar list-1) alt-count))
                         (iter (cdr list-1))))))
    (iter list)))
 
    
;; Counts the number of times 'A shows up from a deck. 
(define (ace-count whole-deck)
  (define (iter list result)
    (cond ((null? list) result)
          ((equal? (caar list) 'A) (iter (cdr list) (+ 1 result)))
          (else (iter (cdr list) result))))
  (iter whole-deck 0))
  
;; returns length of a list
(define (length list)
  (define (iter list result)
    (if (null? list) result
        (iter (cdr list) (+ 1 result))))
  (iter list 0))